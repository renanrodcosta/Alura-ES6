{"version":3,"sources":["../../app-es6/services/NegociacoesService.js"],"names":["NegociacoesService","_http","HttpService","Promise","resolve","reject","get","then","negociacoes","map","Negociacao","Date","negociacao","data","quantidade","valor","catch","console","log","erro","post","all","obterNegociacoesSemana","obterNegociacoesSemanaAnterior","obterNegociacoesSemanaRetrasada","reduce","arrayAchatado","array","concat","ConnectionFactory","getConnection","NegociacaoDao","conexao","dao","adiciona","Error","listarTodos","apagarTodos","listaNegociacoesExistentes","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacoesService.js","sourcesContent":["class NegociacoesService{\r\n\r\n    constructor(){\r\n        this._http = new HttpService()\r\n    }\r\n\r\n    obterNegociacoesSemana() {\r\n        return new Promise((resolve, reject) => {\r\n            this._http\r\n                .get('negociacoes/semana')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes.map(negociacao => new Negociacao(new Date(negociacao.data), negociacao.quantidade, negociacao.valor)))\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro)\r\n                    reject(\"Não foi possível obter as negociações da semana no servidor\")\r\n                })\r\n        })\r\n    }\r\n\r\n    obterNegociacoesSemanaAnterior() {\r\n        return new Promise((resolve, reject) => {\r\n            this._http.get('negociacoes/anterior')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes.map(negociacao => new Negociacao(new Date(negociacao.data), negociacao.quantidade, negociacao.valor)))\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro)\r\n                    reject(\"Não foi possível obter as negociações da semana no anterior servidor\")\r\n                })\r\n        })\r\n    }\r\n\r\n    obterNegociacoesSemanaRetrasada() {\r\n        return new Promise((resolve, reject) => {\r\n            this._http.get('negociacoes/retrasada')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes.map(negociacao => new Negociacao(new Date(negociacao.data), negociacao.quantidade, negociacao.valor)))\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro)\r\n                    reject(\"Não foi possível obter as negociações da semana retrasada no servidor\")\r\n                })\r\n        })\r\n    }\r\n\r\n    gravar(negociacao){\r\n        return new Promise((resolve, reject) => {\r\n            this._http.post('/negociacoes', negociacao)\r\n                .then(() => resolve())\r\n                .catch(erro => {\r\n                    console.log(erro)\r\n                    reject(\"Não foi possível gravar a lista de negociações\")\r\n                })\r\n        })\r\n    }\r\n\r\n    obterNegociacoes(){\r\n        return new Promise((resolve, reject) => {\r\n            Promise.all([   \r\n                this.obterNegociacoesSemana(), \r\n                this.obterNegociacoesSemanaAnterior(), \r\n                this.obterNegociacoesSemanaRetrasada()])\r\n            .then(negociacoes =>   \r\n                resolve(negociacoes.reduce((arrayAchatado, array) => arrayAchatado.concat(array), [])))\r\n            .catch(erro => reject(erro))\r\n        })\r\n    }\r\n\r\n    cadastra(negociacao) {\r\n         return ConnectionFactory\r\n            .getConnection()\r\n            .then(conexao => new NegociacaoDao(conexao))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação cadastrada com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro)\r\n                throw new Error(\"Não foi possível adicionar a negociação\")\r\n            });\r\n    }   \r\n\r\n    lista(){\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(conexao => new NegociacaoDao(conexao))\r\n            .then(dao => dao.listarTodos())\r\n            .catch(erro => {\r\n                throw new Error(\"Não foi possível adicionar a negociação\")\r\n            });\r\n    }\r\n\r\n    apaga(){\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(conexao => new NegociacaoDao(conexao))\r\n            .then(dao => dao.apagarTodos())\r\n            .then(() => 'Negociação apagadas com sucesso')\r\n            .catch(erro => {\r\n                throw new Error(\"Não foi possível apagar as negociações\")\r\n            });\r\n    }\r\n\r\n    importa(listaNegociacoesExistentes){\r\n        return this.obterNegociacoes()\r\n            .then(negociacoes => \r\n                    negociacoes.filter(negociacao => \r\n                        !listaNegociacoesExistentes.some(negociacaoExistente => \r\n                            negociacao.isEquals(negociacaoExistente))))\r\n            .catch(erro => {\r\n                console.log(erro)\r\n                throw new Error(\"Não foi possível importar a lista de negociações\")\r\n            })\r\n    }\r\n}"]}