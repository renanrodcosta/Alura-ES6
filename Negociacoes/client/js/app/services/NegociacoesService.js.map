{"version":3,"sources":["../../app-es6/services/NegociacoesService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacoesService","_http","Promise","resolve","reject","get","then","negociacoes","map","Date","negociacao","data","quantidade","valor","catch","console","log","erro","post","all","obterNegociacoesSemana","obterNegociacoesSemanaAnterior","obterNegociacoesSemanaRetrasada","reduce","arrayAchatado","array","concat","getConnection","conexao","dao","adiciona","Error","listarTodos","apagarTodos","listaNegociacoesExistentes","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacoesService.js","sourcesContent":["import {HttpService} from './HttpService.js'\r\nimport {ConnectionFactory} from './ConnectionFactory.js'\r\nimport {NegociacaoDao} from '../dao/NegociacaoDao.js'\r\nimport {Negociacao} from '../models/Negociacao.js'\r\n\r\nexport class NegociacoesService{\r\n\r\n    constructor(){\r\n        this._http = new HttpService()\r\n    }\r\n\r\n    obterNegociacoesSemana() {\r\n        return new Promise((resolve, reject) => {\r\n            this._http\r\n                .get('negociacoes/semana')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes.map(negociacao => new Negociacao(new Date(negociacao.data), negociacao.quantidade, negociacao.valor)))\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro)\r\n                    reject(\"Não foi possível obter as negociações da semana no servidor\")\r\n                })\r\n        })\r\n    }\r\n\r\n    obterNegociacoesSemanaAnterior() {\r\n        return new Promise((resolve, reject) => {\r\n            this._http.get('negociacoes/anterior')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes.map(negociacao => new Negociacao(new Date(negociacao.data), negociacao.quantidade, negociacao.valor)))\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro)\r\n                    reject(\"Não foi possível obter as negociações da semana no anterior servidor\")\r\n                })\r\n        })\r\n    }\r\n\r\n    obterNegociacoesSemanaRetrasada() {\r\n        return new Promise((resolve, reject) => {\r\n            this._http.get('negociacoes/retrasada')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes.map(negociacao => new Negociacao(new Date(negociacao.data), negociacao.quantidade, negociacao.valor)))\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro)\r\n                    reject(\"Não foi possível obter as negociações da semana retrasada no servidor\")\r\n                })\r\n        })\r\n    }\r\n\r\n    gravar(negociacao){\r\n        return new Promise((resolve, reject) => {\r\n            this._http.post('/negociacoes', negociacao)\r\n                .then(() => resolve())\r\n                .catch(erro => {\r\n                    console.log(erro)\r\n                    reject(\"Não foi possível gravar a lista de negociações\")\r\n                })\r\n        })\r\n    }\r\n\r\n    obterNegociacoes(){\r\n        return new Promise((resolve, reject) => {\r\n            Promise.all([   \r\n                this.obterNegociacoesSemana(), \r\n                this.obterNegociacoesSemanaAnterior(), \r\n                this.obterNegociacoesSemanaRetrasada()])\r\n            .then(negociacoes =>   \r\n                resolve(negociacoes.reduce((arrayAchatado, array) => arrayAchatado.concat(array), [])))\r\n            .catch(erro => reject(erro))\r\n        })\r\n    }\r\n\r\n    cadastra(negociacao) {\r\n         return ConnectionFactory\r\n            .getConnection()\r\n            .then(conexao => new NegociacaoDao(conexao))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação cadastrada com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro)\r\n                throw new Error(\"Não foi possível adicionar a negociação\")\r\n            });\r\n    }   \r\n\r\n    lista(){\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(conexao => new NegociacaoDao(conexao))\r\n            .then(dao => dao.listarTodos())\r\n            .catch(erro => {\r\n                throw new Error(\"Não foi possível adicionar a negociação\")\r\n            });\r\n    }\r\n\r\n    apaga(){\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(conexao => new NegociacaoDao(conexao))\r\n            .then(dao => dao.apagarTodos())\r\n            .then(() => 'Negociação apagadas com sucesso')\r\n            .catch(erro => {\r\n                throw new Error(\"Não foi possível apagar as negociações\")\r\n            });\r\n    }\r\n\r\n    importa(listaNegociacoesExistentes){\r\n        return this.obterNegociacoes()\r\n            .then(negociacoes => \r\n                    negociacoes.filter(negociacao => \r\n                        !listaNegociacoesExistentes.some(negociacaoExistente => \r\n                            negociacao.isEquals(negociacaoExistente))))\r\n            .catch(erro => {\r\n                console.log(erro)\r\n                throw new Error(\"Não foi possível importar a lista de negociações\")\r\n            })\r\n    }\r\n}"]}