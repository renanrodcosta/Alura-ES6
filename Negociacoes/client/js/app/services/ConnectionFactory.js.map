{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAY;AACjC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;AACA,QAAIC,mBAAJ;AACA,QAAIC,cAAJ;;AAEA;AAEI,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM2B;AACnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA6BD,OAA7B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;AAC/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAFD;;AAIAR,gCAAYS,SAAZ,GAAwB,aAAK;AACzB,4BAAG,CAACf,UAAJ,EAAgB;AACZA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAM;AACrB,sCAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH,6BAFD;AAIH;;AAEDE,gCAAQJ,UAAR;AACH,qBAXD;;AAaAM,gCAAYW,OAAZ,GAAsB,aAAK;AACvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAIH,iBAzBM,CAAP;AA0BH;AAjCL;AAAA;AAAA,8CAmC4B;AACpB,oBAAGpB,KAAH,EAAS;AACLA;AACAA,4BAAQ,IAAR;AACH;AACJ;AAxCL;AAAA;AAAA,0CA0CyBD,UA1CzB,EA0CqC;;AAE7BH,uBAAOyB,OAAP,CAAe,iBAAS;AACpB,wBAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgDzB,WAAW0B,iBAAX,CAA6BD,KAA7B;AAChDzB,+BAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,iBAHD;AAIH;AAhDL;;AAAA;AAAA;AAkDH,CAzDuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function () {\r\n    const stores = ['negociacoes']\r\n    const version = 4\r\n    const dbName = 'aluraframe'\r\n    let connection\r\n    let close\r\n\r\n    return class ConnectionFactory {\r\n\r\n        constructor() {\r\n            throw new Error('Não é possível criar instâncias de ConnectionFactory')\r\n        }\r\n\r\n        static getConnection() {\r\n            return new Promise((resolve, reject) => {\r\n\r\n                let openRequest = window.indexedDB.open(dbName,version)\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectionFactory._createStores(e.target.result)\r\n                }\r\n\r\n                openRequest.onsuccess = e => {    \r\n                    if(!connection) {\r\n                        connection = e.target.result\r\n                        close = connection.close.bind(connection)\r\n                        connection.close = () => {\r\n                            throw new Error('Não é possivel chamar diretamente o close connection')\r\n                        }\r\n\r\n                    }\r\n\r\n                    resolve(connection)\r\n                }\r\n\r\n                openRequest.onerror = e => {    \r\n                    console.log(e.target.error)\r\n                    reject(e.target.error.name)\r\n                }\r\n            })\r\n        }\r\n\r\n        static closeConnection(){\r\n            if(close){\r\n                close()\r\n                close = null\r\n            }\r\n        }\r\n\r\n        static _createStores(connection) {\r\n\r\n            stores.forEach(store => {\r\n                if(connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store)\r\n                connection.createObjectStore(store, { autoIncrement: true })\r\n            })\r\n        }\r\n    }\r\n})()"]}