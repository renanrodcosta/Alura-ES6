{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AACXC,sB;AACAC,iB;;yCAESC,iB;AAET,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAEsB;AACnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA6BD,OAA7B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,aAAK;AACzB,oCAAG,CAAChB,UAAJ,EAAgB;AACZA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAM;AACrB,8CAAM,IAAIE,KAAJ,CAAU,sDAAV,CAAN;AACH,qCAFD;AAIH;;AAEDE,wCAAQL,UAAR;AACH,6BAXD;;AAaAO,wCAAYW,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAIH,yBAzBM,CAAP;AA0BH;;;sDAEuB;AACpB,4BAAGrB,KAAH,EAAS;AACLA;AACAA,oCAAQ,IAAR;AACH;AACJ;;;kDAEoBD,U,EAAY;;AAE7BH,+BAAO0B,OAAP,CAAe,iBAAS;AACpB,gCAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgD1B,WAAW2B,iBAAX,CAA6BD,KAA7B;AAChD1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,yBAHD;AAIH","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes']\r\nconst version = 4\r\nconst dbName = 'aluraframe'\r\nlet connection\r\nlet close\r\n\r\nexport class ConnectionFactory {\r\n\r\n    constructor() {\r\n        throw new Error('Não é possível criar instâncias de ConnectionFactory')\r\n    }\r\n\r\n    static getConnection() {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let openRequest = window.indexedDB.open(dbName,version)\r\n\r\n            openRequest.onupgradeneeded = e => {\r\n                ConnectionFactory._createStores(e.target.result)\r\n            }\r\n\r\n            openRequest.onsuccess = e => {    \r\n                if(!connection) {\r\n                    connection = e.target.result\r\n                    close = connection.close.bind(connection)\r\n                    connection.close = () => {\r\n                        throw new Error('Não é possivel chamar diretamente o close connection')\r\n                    }\r\n\r\n                }\r\n\r\n                resolve(connection)\r\n            }\r\n\r\n            openRequest.onerror = e => {    \r\n                console.log(e.target.error)\r\n                reject(e.target.error.name)\r\n            }\r\n        })\r\n    }\r\n\r\n    static closeConnection(){\r\n        if(close){\r\n            close()\r\n            close = null\r\n        }\r\n    }\r\n\r\n    static _createStores(connection) {\r\n\r\n        stores.forEach(store => {\r\n            if(connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store)\r\n            connection.createObjectStore(store, { autoIncrement: true })\r\n        })\r\n    }\r\n}"]}